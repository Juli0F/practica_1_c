
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.operaciones;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java.io.Reader;
import com.mycompany.reportes.Operadores;
import com.mycompany.reportes.ReporteDuo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\016\003\000\002\002\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\021\004" +
    "\000\002\021\004\000\002\021\002\000\002\022\004\000" +
    "\002\017\014\000\002\023\003\000\002\023\003\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\012\013\000\002\011\013" +
    "\000\002\013\015\000\002\014\015\000\002\015\017\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\002\004\000\002\002\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\002\000" +
    "\002\003\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\002\000\002\004\005\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\010\003\007\013\005\014\004\001\002\000" +
    "\004\015\160\001\002\000\014\017\027\020\030\021\023" +
    "\022\026\023\025\001\002\000\010\002\ufffa\013\005\014" +
    "\004\001\002\000\010\002\ufffa\013\005\014\004\001\002" +
    "\000\004\002\001\001\002\000\010\002\ufffa\013\005\014" +
    "\004\001\002\000\004\002\013\001\002\000\004\002\000" +
    "\001\002\000\010\002\ufffa\013\005\014\004\001\002\000" +
    "\010\002\ufffa\013\005\014\004\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\ufffb\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\ufffe\001\002" +
    "\000\004\010\144\001\002\000\010\002\ufff9\013\ufff9\014" +
    "\ufff9\001\002\000\004\010\126\001\002\000\004\010\112" +
    "\001\002\000\004\010\101\001\002\000\004\010\032\001" +
    "\002\000\010\002\ufff5\013\ufff5\014\ufff5\001\002\000\010" +
    "\003\033\010\036\025\040\001\002\000\006\011\uffe2\012" +
    "\uffe2\001\002\000\012\004\072\007\071\011\uffdf\012\uffdf" +
    "\001\002\000\004\012\052\001\002\000\010\003\033\010" +
    "\036\025\040\001\002\000\016\004\uffdb\005\041\006\042" +
    "\007\uffdb\011\uffdb\012\uffdb\001\002\000\016\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\001\002\000\006" +
    "\010\036\025\040\001\002\000\006\010\036\025\040\001" +
    "\002\000\012\004\uffde\007\uffde\011\uffde\012\uffde\001\002" +
    "\000\016\004\uffdb\005\041\006\042\007\uffdb\011\uffdb\012" +
    "\uffdb\001\002\000\012\004\uffdc\007\uffdc\011\uffdc\012\uffdc" +
    "\001\002\000\016\004\uffdb\005\041\006\042\007\uffdb\011" +
    "\uffdb\012\uffdb\001\002\000\012\004\uffdd\007\uffdd\011\uffdd" +
    "\012\uffdd\001\002\000\004\011\051\001\002\000\016\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda\001\002" +
    "\000\010\003\033\010\036\025\040\001\002\000\004\012" +
    "\054\001\002\000\010\003\033\010\036\025\040\001\002" +
    "\000\004\012\056\001\002\000\022\026\067\027\063\030" +
    "\066\031\061\032\064\033\062\034\057\035\065\001\002" +
    "\000\004\011\uffe5\001\002\000\004\011\070\001\002\000" +
    "\004\011\uffe8\001\002\000\004\011\uffe6\001\002\000\004" +
    "\011\uffea\001\002\000\004\011\uffe7\001\002\000\004\011" +
    "\uffe4\001\002\000\004\011\uffe9\001\002\000\004\011\uffeb" +
    "\001\002\000\010\002\uffef\013\uffef\014\uffef\001\002\000" +
    "\006\010\036\025\040\001\002\000\006\010\036\025\040" +
    "\001\002\000\006\011\uffe3\012\uffe3\001\002\000\012\004" +
    "\072\007\071\011\uffdf\012\uffdf\001\002\000\006\011\uffe1" +
    "\012\uffe1\001\002\000\012\004\072\007\071\011\uffdf\012" +
    "\uffdf\001\002\000\006\011\uffe0\012\uffe0\001\002\000\010" +
    "\002\ufff4\013\ufff4\014\ufff4\001\002\000\010\003\033\010" +
    "\036\025\040\001\002\000\004\012\103\001\002\000\010" +
    "\003\033\010\036\025\040\001\002\000\004\012\105\001" +
    "\002\000\010\003\033\010\036\025\040\001\002\000\004" +
    "\012\107\001\002\000\022\026\067\027\063\030\066\031" +
    "\061\032\064\033\062\034\057\035\065\001\002\000\004" +
    "\011\111\001\002\000\010\002\ufff0\013\ufff0\014\ufff0\001" +
    "\002\000\010\003\033\010\036\025\040\001\002\000\010" +
    "\002\ufff2\013\ufff2\014\ufff2\001\002\000\004\012\115\001" +
    "\002\000\010\003\033\010\036\025\040\001\002\000\004" +
    "\012\117\001\002\000\010\003\033\010\036\025\040\001" +
    "\002\000\004\012\121\001\002\000\010\003\033\010\036" +
    "\025\040\001\002\000\004\012\123\001\002\000\022\026" +
    "\067\027\063\030\066\031\061\032\064\033\062\034\057" +
    "\035\065\001\002\000\004\011\125\001\002\000\010\002" +
    "\uffed\013\uffed\014\uffed\001\002\000\010\003\033\010\036" +
    "\025\040\001\002\000\010\002\ufff1\013\ufff1\014\ufff1\001" +
    "\002\000\004\012\131\001\002\000\010\003\033\010\036" +
    "\025\040\001\002\000\004\012\133\001\002\000\010\003" +
    "\033\010\036\025\040\001\002\000\004\012\135\001\002" +
    "\000\010\003\033\010\036\025\040\001\002\000\004\012" +
    "\137\001\002\000\010\003\033\010\036\025\040\001\002" +
    "\000\004\012\141\001\002\000\022\026\067\027\063\030" +
    "\066\031\061\032\064\033\062\034\057\035\065\001\002" +
    "\000\004\011\143\001\002\000\010\002\uffec\013\uffec\014" +
    "\uffec\001\002\000\010\003\033\010\036\025\040\001\002" +
    "\000\010\002\ufff3\013\ufff3\014\ufff3\001\002\000\004\012" +
    "\147\001\002\000\010\003\033\010\036\025\040\001\002" +
    "\000\004\012\151\001\002\000\010\003\033\010\036\025" +
    "\040\001\002\000\004\012\153\001\002\000\010\003\033" +
    "\010\036\025\040\001\002\000\004\012\155\001\002\000" +
    "\022\026\067\027\063\030\066\031\061\032\064\033\062" +
    "\034\057\035\065\001\002\000\004\011\157\001\002\000" +
    "\010\002\uffee\013\uffee\014\uffee\001\002\000\004\016\161" +
    "\001\002\000\004\010\162\001\002\000\010\003\033\010" +
    "\036\025\040\001\002\000\004\012\164\001\002\000\010" +
    "\003\033\010\036\025\040\001\002\000\004\012\166\001" +
    "\002\000\006\022\171\024\170\001\002\000\004\011\172" +
    "\001\002\000\004\011\ufff6\001\002\000\004\011\ufff7\001" +
    "\002\000\010\002\ufff8\013\ufff8\014\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\012\007\007\016\011\017\005\022\010\001" +
    "\001\000\002\001\001\000\004\010\023\001\001\000\010" +
    "\017\013\021\021\022\014\001\001\000\010\017\013\021" +
    "\020\022\014\001\001\000\002\001\001\000\010\017\013" +
    "\021\015\022\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\013\021\017\022\014\001\001\000\010" +
    "\017\013\021\016\022\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\144\001\001\000\002\001\001\000" +
    "\004\015\126\001\001\000\004\014\112\001\001\000\004" +
    "\012\077\001\001\000\004\011\030\001\001\000\002\001" +
    "\001\000\010\002\034\003\033\004\036\001\001\000\002" +
    "\001\001\000\004\005\072\001\001\000\002\001\001\000" +
    "\010\002\047\003\033\004\036\001\001\000\004\006\042" +
    "\001\001\000\002\001\001\000\004\004\045\001\001\000" +
    "\004\004\043\001\001\000\002\001\001\000\004\006\044" +
    "\001\001\000\002\001\001\000\004\006\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\052\003\033\004\036\001\001\000\002\001\001\000" +
    "\010\002\054\003\033\004\036\001\001\000\002\001\001" +
    "\000\004\020\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\075\004\036" +
    "\001\001\000\006\003\073\004\036\001\001\000\002\001" +
    "\001\000\004\005\074\001\001\000\002\001\001\000\004" +
    "\005\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\101\003\033\004\036\001\001\000\002\001\001" +
    "\000\010\002\103\003\033\004\036\001\001\000\002\001" +
    "\001\000\010\002\105\003\033\004\036\001\001\000\002" +
    "\001\001\000\004\020\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\113\003\033\004\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\115\003" +
    "\033\004\036\001\001\000\002\001\001\000\010\002\117" +
    "\003\033\004\036\001\001\000\002\001\001\000\010\002" +
    "\121\003\033\004\036\001\001\000\002\001\001\000\004" +
    "\020\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\127\003\033\004\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\131\003\033\004\036\001" +
    "\001\000\002\001\001\000\010\002\133\003\033\004\036" +
    "\001\001\000\002\001\001\000\010\002\135\003\033\004" +
    "\036\001\001\000\002\001\001\000\010\002\137\003\033" +
    "\004\036\001\001\000\002\001\001\000\004\020\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\145" +
    "\003\033\004\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\147\003\033\004\036\001\001\000\002" +
    "\001\001\000\010\002\151\003\033\004\036\001\001\000" +
    "\002\001\001\000\010\002\153\003\033\004\036\001\001" +
    "\000\002\001\001\000\004\020\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\162\003\033\004\036\001\001\000\002\001" +
    "\001\000\010\002\164\003\033\004\036\001\001\000\002" +
    "\001\001\000\004\023\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





	//contadores para las figuras
	private int contError ;
	private int contLinea ;
	private int contCirculo ;
	private int contCuadrado ;
	private int contRectangulo;
	private int contPoligono ;

	//contadores para los colores
	private int contAzul ;
	private int contAmarillo;
	private int contCafe ;
	private int contMorado ;
	private int contNaranja ;
	private int contNegro ;
	private int contRojo ;
	private int contVerde ;
	
	

//cont animaciones
	private int contAnimacionLinea ;
	private int contAnimacionCurva ;

	private String mensaje;

	private List<ErroresC8> err;
	private List<Operadores> operadoresArit;
	private List<String> lstSentencias;


    public parser (MyLexer op){
		super(op);
		err = op.getListaErroresLexicos();

		this.contError = 0;
		this.contLinea = 0;
		this.contCirculo = 0;
		this.contCuadrado = 0;
		this.contRectangulo = 0;
		this.contPoligono = 0;

		this.contAzul = 0;
		this.contRojo = 0;
		this.contVerde = 0;
		this.contAmarillo = 0;
		this.contNaranja = 0;
		this.contMorado = 0;
		this.contCafe = 0;
		this.contNegro = 0;

		this.contAnimacionLinea = 0;
		this.contAnimacionCurva = 0;

		this.mensaje = "";

		operadoresArit = new ArrayList<>();
		
		lstSentencias = new ArrayList<>();


	}

	public List<ErroresC8> getListaErrores(){
		return this.err;
	}
	
    public int getContError() {
        return contError;
    }

    public int getContLinea() {
        return contLinea;
    }

    public int getContCirculo() {
        return contCirculo;
    }

    public int getContCuadrado() {
        return contCuadrado;
    }

    public int getContRectangulo() {
        return contRectangulo;
    }

    public int getContPoligono() {
        return contPoligono;
    }

    public int getContAzul() {
        return contAzul;
    }

    public int getContRojo() {
        return contRojo;
    }

    public int getContVerde() {
        return contVerde;
    }

    public int getContAmarillo() {
        return contAmarillo;
    }

    public int getContNaranja() {
        return contNaranja;
    }

    public int getContMorado() {
        return contMorado;
    }

    public int getContCafe() {
        return contCafe;
    }

    public int getContNegro() {
        return contNegro;
    }

    public int getContAnimacionLinea() {
        return contAnimacionLinea;
    }

    public int getContAnimacionCurva() {
        return contAnimacionCurva;
    }
    /* Reporte de error encontrado. */
    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        
        
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            String lexema = (String) s.value;
            String descripcion = "Se Esperaba: ";

        	for (Integer token : expected_token_ids()) {

        		if (token>8) {
        			descripcion = descripcion + " \'"+sym.terminalNames[token].toLowerCase()+"\'";	
        		}else{

        		switch (token) {
		            case 2:
		              descripcion = descripcion + "  \'+\'"  ;
		                break;
	                case 3:
	                	descripcion = descripcion + " \'*\'";
	                break;
	                case 4:
	                	descripcion = descripcion + " \'/\'";
	                break;
	                case 5:
	                	descripcion = descripcion + " \'-\'";
	                break;
	                case 6:
	                	descripcion = descripcion + " \'(\'";
	                break;
	                case 7:
	                	descripcion = descripcion + " \'')\'";
	                break;
	                case 8:
	                	descripcion = descripcion + "  \',\'";
	                break;
		        }

				}
               
            }
            err.add(new ErroresC8(
            		lexema,
            		""+s.left,
            		""+s.right,
            		"Sintactico",
            		mensaje+".  "+descripcion
            	));


	       
        }
        m.append(" : "+message);
        System.err.println(m);
    }

	public void report_fatal_error(String message, Object info) {
		System.out.println("report_fatal");
	}
	public void report_fatal_error(Symbol cur) {
		System.out.println("unrecovered_syntax_error");
	}

	public void syntax_error(Symbol cur_token) {
            
            report_error( "Error Sintactico", cur_token) ;

        }

    protected int _error_sync_size() {
		return 1;
	}

	public void agregarOperador(String nombreOp,String operador, String value , String value2){

		operadoresArit.add(new Operadores(nombreOp,cur_token.left+"",cur_token.right+"",(value+operador + value2)));
	}

	 public List<Operadores> getOperadoresArit() {
        return operadoresArit;
    }
    

    public List<String> getLstSentencias(){
    	return this.lstSentencias;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	int resultado = 0;
	String signo = "";
	String nombreSigno = "";


	
	private void multiplicacionODivision(String signo,String e,String e1,int resultado){

	
		switch (signo) {
			case " * ":
				
				if (resultado != 1) {
					agregarOperador("Multiplicaion"," * ",e,e1);	
				}

			break;

			case " / ":
				
				
				if (resultado!= 1) {
					agregarOperador("Division"," / ",e,e1);	
				}
			break;

			default :
			

		
	}
	
	}

	private void sumaResta(String signo,String e,String e1,int resultado){

	
		switch (signo) {
			case " + ":
				
				if (resultado!=0) {
					agregarOperador("Suma"," + ",e+"",e1+"");	
				}

			break;

			case " - ":
				
				if (resultado != 0) {
					agregarOperador("Resta"," - ",e+"",e1+"");	
				}
				
			break;

			default :
			

		
	}
	
	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= sentencia 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencia ::= graph sen_1 
            {
              String RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String gr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sn1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sn1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sn1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= animacion sen_1 
            {
              String RESULT =null;
		int anleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int anright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String an = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sn1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sn1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sn1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		lstSentencias.add(an);  System.out.println("animacion "+an+" ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= error sen_1 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sn1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sn1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sn1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("error sintactico "+sn1 ); RESULT = sn1; contError++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sen_1 ::= animacion sen_1 
            {
              String RESULT =null;
		int anleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int anright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String an = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = an + " "+ sn ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sen_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sen_1 ::= graph sen_1 
            {
              String RESULT =null;
		int grleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int grright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String gr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sn1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sn1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sn1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = gr+" "+sn1+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sen_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sen_1 ::= 
            {
              String RESULT =null;
		RESULT = " ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sen_1",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // graph ::= GRAFICAR figura 
            {
              String RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
 	lstSentencias.add(fi); RESULT = "graficar "+fi;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("graph",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // animacion ::= ANIMAR OBJETO ANTERIOR PAR_ABIERTO s COMA s COMA tipo_animacion PAR_CERRADO 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t_anleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t_anright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t_an = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	lstSentencias.add("animacion, "+s1+","+s2+","+t_an);
	RESULT = "animar objeto anterior ( "+s1+","+s2+","+t_an+")"; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("animacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_animacion ::= LINEA 
            {
              String RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String li = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = li; contAnimacionLinea++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_animacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_animacion ::= CURVA 
            {
              String RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cu; contAnimacionCurva++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_animacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // figura ::= CUADRADO cuadrado 
            {
              String RESULT =null;
		int cualeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cua = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "cuadrado "+cua; contCuadrado++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // figura ::= CIRCULO circulo 
            {
              String RESULT =null;
		int cirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cirright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "circulo "+cir; contCirculo++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // figura ::= RECTANGULO rectangulo 
            {
              String RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int recright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "rectangulo "+rec; contRectangulo++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // figura ::= LINEA linea 
            {
              String RESULT =null;
		int linleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "linea "+lin; contLinea++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // figura ::= POLIGONO poligono 
            {
              String RESULT =null;
		int polleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int polright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String pol = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "poligono "+pol; contPoligono++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // circulo ::= PAR_ABIERTO s COMA s COMA s COMA color PAR_CERRADO 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer s3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s1+","+s2+","+s3+","+col;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("circulo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuadrado ::= PAR_ABIERTO s COMA s COMA s COMA color PAR_CERRADO 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer s3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = s1+","+s2+","+s3+","+col;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuadrado",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rectangulo ::= PAR_ABIERTO s COMA s COMA s COMA s COMA color PAR_CERRADO 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer s3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer s4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rectangulo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // linea ::= PAR_ABIERTO s COMA s COMA s COMA s COMA color PAR_CERRADO 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer s3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer s4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // poligono ::= PAR_ABIERTO s COMA s COMA s COMA s COMA s COMA color PAR_CERRADO 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer s3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer s4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer s5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poligono",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // color ::= AZUL 
            {
              String RESULT =null;
		int azleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int azright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String az = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = az; contAzul++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // color ::= ROJO 
            {
              String RESULT =null;
		int roleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int roright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ro = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ro; contRojo++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // color ::= VERDE 
            {
              String RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ve = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ve; contVerde++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // color ::= AMARILLO 
            {
              String RESULT =null;
		int amleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int amright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String am = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = am; contAmarillo++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // color ::= NARANJA 
            {
              String RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int naright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String na = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = na; contNaranja++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // color ::= MORADO 
            {
              String RESULT =null;
		int moleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String mo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mo; contMorado++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // color ::= CAFE 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ca; contCafe++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // color ::= NEGRO 
            {
              String RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ne = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ne; contNegro++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("color",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s ::= t z 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
		 

		 
		switch (signo) {
			case " + ":
				RESULT = e+e1;
				//agregarOperador("SUMA"," + ",e+"",e1+"");
				sumaResta(" + ",e+"",e1+"",e1);
			break;
			case " - ":
				RESULT = e-e1;
				sumaResta(" - ",e+"",e1+"",e1);
				//agregarOperador("Resta"," - ",e+"",e1+"");
			break;
			default :
			RESULT = e;
			
		}
		 	
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s ::= error 
            {
              Integer RESULT =null;
		
			System.out.println("ERROR EN OPERACION Aritmetica"); contError++;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // z ::= SUMA t z 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = e+e1;
			
			sumaResta(" + ",e+"",e1+"",e1);
			//agregarOperador("SUMA"," + ",e+"",e1+"");

			nombreSigno = "Suma";
			signo = " + "; 
	   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // z ::= RESTA t z 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT =e-e1; 
	
		sumaResta(" - ",e+"",e1+"",e1);

		
		nombreSigno = "Resta";
		signo = " - "; 

	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // z ::= 
            {
              Integer RESULT =null;
		RESULT = 0;
		
		nombreSigno = "";
		signo="";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // t ::= f r 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

	switch (signo) {
			case " * ":
				RESULT = e*e1;
				agregarOperador("Multiplicaion"," * ",e+"",e1+"");
			break;

			case " / ":
				RESULT = e/e1;
				agregarOperador("Division"," / ",e+"",e1+"");
			break;

			default :
			RESULT = e;

		
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // r ::= MULTIPLICACION f r 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = e*e1; 

			agregarOperador("Multiplicacion"," * ",e+"",e1+"");
			
			nombreSigno = " Multiplicacion ";
			signo=" * ";
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // r ::= DIVISION f r 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 		RESULT =e / e1; 
 		
 		agregarOperador("Division"," / ",e+"",e1+"");
 		
 		nombreSigno = " Division ";
 		signo=" / ";
		
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // r ::= 
            {
              Integer RESULT =null;
		
		RESULT = 1;
		
		nombreSigno = "&";
		signo="&";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // f ::= PAR_ABIERTO s PAR_CERRADO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // f ::= ENTERO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
