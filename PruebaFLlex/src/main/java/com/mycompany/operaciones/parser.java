
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mycompany.operaciones;

import java_cup.runtime.*;
import java.io.Reader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\016\003\000\002\002\004\000\002\007" +
    "\005\000\002\007\004\000\002\007\002\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\017\014\000\002\012\013\000\002" +
    "\011\014\000\002\013\016\000\002\014\016\000\002\015" +
    "\020\000\002\002\004\000\002\002\003\000\002\005\005" +
    "\000\002\005\005\000\002\005\002\000\002\003\004\000" +
    "\002\006\005\000\002\006\005\000\002\006\002\000\002" +
    "\004\005\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\010\002\ufffd\013\ufffd\014\ufffd\001\002\000" +
    "\010\002\001\013\010\014\007\001\002\000\004\002\006" +
    "\001\002\000\004\002\000\001\002\000\004\015\143\001" +
    "\002\000\014\017\015\020\017\021\012\022\016\023\013" +
    "\001\002\000\010\002\ufffe\013\ufffe\014\ufffe\001\002\000" +
    "\004\010\126\001\002\000\004\010\107\001\002\000\010" +
    "\002\uffff\013\uffff\014\uffff\001\002\000\004\010\076\001" +
    "\002\000\004\010\060\001\002\000\004\010\021\001\002" +
    "\000\010\002\ufffc\013\ufffc\014\ufffc\001\002\000\004\010" +
    "\022\001\002\000\010\003\023\010\026\026\030\001\002" +
    "\000\006\011\ufff0\012\ufff0\001\002\000\012\004\052\007" +
    "\051\011\uffed\012\uffed\001\002\000\004\012\042\001\002" +
    "\000\010\003\023\010\026\026\030\001\002\000\016\004" +
    "\uffe9\005\031\006\032\007\uffe9\011\uffe9\012\uffe9\001\002" +
    "\000\016\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\012" +
    "\uffe7\001\002\000\006\010\026\026\030\001\002\000\006" +
    "\010\026\026\030\001\002\000\012\004\uffec\007\uffec\011" +
    "\uffec\012\uffec\001\002\000\016\004\uffe9\005\031\006\032" +
    "\007\uffe9\011\uffe9\012\uffe9\001\002\000\012\004\uffea\007" +
    "\uffea\011\uffea\012\uffea\001\002\000\016\004\uffe9\005\031" +
    "\006\032\007\uffe9\011\uffe9\012\uffe9\001\002\000\012\004" +
    "\uffeb\007\uffeb\011\uffeb\012\uffeb\001\002\000\004\011\041" +
    "\001\002\000\016\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011" +
    "\uffe8\012\uffe8\001\002\000\010\003\023\010\026\026\030" +
    "\001\002\000\004\012\044\001\002\000\010\003\023\010" +
    "\026\026\030\001\002\000\004\012\046\001\002\000\004" +
    "\024\047\001\002\000\004\011\050\001\002\000\010\002" +
    "\ufff5\013\ufff5\014\ufff5\001\002\000\006\010\026\026\030" +
    "\001\002\000\006\010\026\026\030\001\002\000\006\011" +
    "\ufff1\012\ufff1\001\002\000\012\004\052\007\051\011\uffed" +
    "\012\uffed\001\002\000\006\011\uffef\012\uffef\001\002\000" +
    "\012\004\052\007\051\011\uffed\012\uffed\001\002\000\006" +
    "\011\uffee\012\uffee\001\002\000\004\010\062\001\002\000" +
    "\010\002\ufff9\013\ufff9\014\ufff9\001\002\000\010\003\023" +
    "\010\026\026\030\001\002\000\004\012\064\001\002\000" +
    "\010\003\023\010\026\026\030\001\002\000\004\012\066" +
    "\001\002\000\010\003\023\010\026\026\030\001\002\000" +
    "\004\012\070\001\002\000\010\003\023\010\026\026\030" +
    "\001\002\000\004\012\072\001\002\000\004\024\073\001" +
    "\002\000\004\011\074\001\002\000\010\002\ufff3\013\ufff3" +
    "\014\ufff3\001\002\000\010\002\ufffb\013\ufffb\014\ufffb\001" +
    "\002\000\010\003\023\010\026\026\030\001\002\000\004" +
    "\012\100\001\002\000\010\003\023\010\026\026\030\001" +
    "\002\000\004\012\102\001\002\000\010\003\023\010\026" +
    "\026\030\001\002\000\004\012\104\001\002\000\004\024" +
    "\105\001\002\000\004\011\106\001\002\000\010\002\ufff6" +
    "\013\ufff6\014\ufff6\001\002\000\004\010\111\001\002\000" +
    "\010\002\ufff8\013\ufff8\014\ufff8\001\002\000\010\003\023" +
    "\010\026\026\030\001\002\000\004\012\113\001\002\000" +
    "\010\003\023\010\026\026\030\001\002\000\004\012\115" +
    "\001\002\000\010\003\023\010\026\026\030\001\002\000" +
    "\004\012\117\001\002\000\010\003\023\010\026\026\030" +
    "\001\002\000\004\012\121\001\002\000\010\003\023\010" +
    "\026\026\030\001\002\000\004\012\123\001\002\000\004" +
    "\024\124\001\002\000\004\011\125\001\002\000\010\002" +
    "\ufff2\013\ufff2\014\ufff2\001\002\000\004\010\130\001\002" +
    "\000\010\002\ufffa\013\ufffa\014\ufffa\001\002\000\010\003" +
    "\023\010\026\026\030\001\002\000\004\012\132\001\002" +
    "\000\010\003\023\010\026\026\030\001\002\000\004\012" +
    "\134\001\002\000\010\003\023\010\026\026\030\001\002" +
    "\000\004\012\136\001\002\000\010\003\023\010\026\026" +
    "\030\001\002\000\004\012\140\001\002\000\004\024\141" +
    "\001\002\000\004\011\142\001\002\000\010\002\ufff4\013" +
    "\ufff4\014\ufff4\001\002\000\004\016\144\001\002\000\004" +
    "\010\145\001\002\000\010\003\023\010\026\026\030\001" +
    "\002\000\004\012\147\001\002\000\010\003\023\010\026" +
    "\026\030\001\002\000\004\012\151\001\002\000\004\025" +
    "\152\001\002\000\004\011\153\001\002\000\010\002\ufff7" +
    "\013\ufff7\014\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\006\007\003\016\004\001\001\000\004\017" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\013\001\001\000\002\001\001\000" +
    "\004\013\126\001\001\000\004\015\107\001\001\000\002" +
    "\001\001\000\004\012\074\001\001\000\004\014\060\001" +
    "\001\000\004\011\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\024\003\023\004\026\001\001\000" +
    "\002\001\001\000\004\005\052\001\001\000\002\001\001" +
    "\000\010\002\037\003\023\004\026\001\001\000\004\006" +
    "\032\001\001\000\002\001\001\000\004\004\035\001\001" +
    "\000\004\004\033\001\001\000\002\001\001\000\004\006" +
    "\034\001\001\000\002\001\001\000\004\006\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\042\003\023\004\026\001\001\000\002\001\001" +
    "\000\010\002\044\003\023\004\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\055\004\026\001\001\000\006\003\053\004" +
    "\026\001\001\000\002\001\001\000\004\005\054\001\001" +
    "\000\002\001\001\000\004\005\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\062" +
    "\003\023\004\026\001\001\000\002\001\001\000\010\002" +
    "\064\003\023\004\026\001\001\000\002\001\001\000\010" +
    "\002\066\003\023\004\026\001\001\000\002\001\001\000" +
    "\010\002\070\003\023\004\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\076\003\023\004\026\001\001" +
    "\000\002\001\001\000\010\002\100\003\023\004\026\001" +
    "\001\000\002\001\001\000\010\002\102\003\023\004\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\111\003\023\004\026\001\001\000\002\001" +
    "\001\000\010\002\113\003\023\004\026\001\001\000\002" +
    "\001\001\000\010\002\115\003\023\004\026\001\001\000" +
    "\002\001\001\000\010\002\117\003\023\004\026\001\001" +
    "\000\002\001\001\000\010\002\121\003\023\004\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\130\003\023\004\026\001\001\000\002\001\001" +
    "\000\010\002\132\003\023\004\026\001\001\000\002\001" +
    "\001\000\010\002\134\003\023\004\026\001\001\000\002" +
    "\001\001\000\010\002\136\003\023\004\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\145\003\023\004\026\001\001\000\002\001\001\000\010" +
    "\002\147\003\023\004\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	private int contError = 0;
	private int contLnea = 0;
	private int contCirculo = 0;
	private int contCuadrado = 0;
	private int contRectangulo =0;

    public parser (Operaciones op){
		super(op);
	}
	
	public int getContCirculo(){
		return this.contCirculo;
	}
	public int getContError(){
		return this.contError;
	}
    /* Reporte de error encontrado. */
    /*
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        System.err.println("report_error");
        
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en linea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m+"L");
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecucion. 
    public void report_fatal_error(String message, Object info) {
    	System.err.println("fatal");
        report_error(message, info);
       // System.exit(1);
    }

public void syntax_error(Symbol cur_token) {
		System.out.println("Error en Sintaxis: " + symbl_name_from_id(cur_token.sym));
}
*/
public void report_error(String message, Object info) {
		System.out.println("reporterror");
	}
	public void report_fatal_error(String message, Object info) {
		System.out.println("report_fatal");
	}
	public void report_fatal_error(Symbol cur) {
		System.out.println("unrecovered_syntax_error");
	}
	public void syntax_error(Symbol cur_token) {
		System.out.println("syntax_err: " + symbl_name_from_id(cur_token.sym));
	}
    protected int error_sync_size() {
		return 2;
	}

    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


int resultado = 0;

	
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencia ::= sentencia GRAFICAR figura 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String fi = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("graficar "+fi+" " );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= sentencia animacion 
            {
              String RESULT =null;
		int senleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int anleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int anright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String an = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("animacion "+an+" ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // figura ::= CUADRADO cuadrado 
            {
              String RESULT =null;
		int cualeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cuaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cua = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "cuadrado "+cua; contCuadrado++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // figura ::= CIRCULO circulo 
            {
              String RESULT =null;
		int cirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cirright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "circulo "+cir; contCirculo++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // figura ::= RECTANGULO rectangulo 
            {
              String RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int recright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "rectangulo "+rec; contRectangulo++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // figura ::= LINEA linea 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // figura ::= POLIGONO poligono 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("figura",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // animacion ::= ANIMAR OBJETO ANTERIOR PAR_ABIERTO s COMA s COMA TIPO_ANIMACION PAR_CERRADO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("animacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // circulo ::= PAR_ABIERTO s COMA s COMA s COMA COLOR PAR_CERRADO 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer s3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = "( "+s1+","+s2+","+s3+","+col+")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("circulo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuadrado ::= PAR_ABIERTO PAR_ABIERTO s COMA s COMA s COMA COLOR PAR_CERRADO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuadrado",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rectangulo ::= PAR_ABIERTO PAR_ABIERTO s COMA s COMA s COMA s COMA COLOR PAR_CERRADO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rectangulo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // linea ::= PAR_ABIERTO PAR_ABIERTO s COMA s COMA s COMA s COMA COLOR PAR_CERRADO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // poligono ::= PAR_ABIERTO PAR_ABIERTO s COMA s COMA s COMA s COMA s COMA COLOR PAR_CERRADO 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("poligono",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s ::= t z 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e+e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s ::= error 
            {
              Integer RESULT =null;
		System.out.println("ERROR EN OPERACION Aritmetica"); contError++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // z ::= SUMA t z 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e+e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // z ::= RESTA t z 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =e-e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // z ::= 
            {
              Integer RESULT =null;
		RESULT = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("z",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // t ::= f r 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =e * e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // r ::= MULTIPLICACION f r 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e*e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // r ::= DIVISION f r 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =e / e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // r ::= 
            {
              Integer RESULT =null;
		RESULT = 1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // f ::= PAR_ABIERTO s PAR_CERRADO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // f ::= ENTERO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
